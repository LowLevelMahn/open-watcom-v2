:segment QNX
:include quantum/stat.mh
:elsesegment
/*
 *  sys/stat.h  Equates and prototype for fstat, stat functions
 *
:include crwat.sp
 */
#ifndef _SYS_STAT_H_INCLUDED
#define _SYS_STAT_H_INCLUDED

:include readonly.sp

:include extposix.sp

:include owrtlink.sp

:segment DOS
:include lfndos.sp

:endsegment
:include systypes.sp

:include cpluspro.sp

:segment LINUX
:include lnxkpack.sp

/* Versions of the `struct stat' data structure.  */
#define _STAT_VER_LINUX_OLD 1
#define _STAT_VER_KERNEL    1
#define _STAT_VER_SVR4      2
#define _STAT_VER_LINUX     3
#define _STAT_VER           _STAT_VER_LINUX /* The one defined below.  */

:include incdir.sp

#include _ARCH_INCLUDE(sys/stat.h)

/* Tell code we have these members.  */
#define _STATBUF_ST_BLKSIZE
#define _STATBUF_ST_RDEV

:elsesegment DOS
:include pshpackl.sp

struct stat {
    dev_t   st_dev;         /* disk drive file resides on */
    ino_t   st_ino;         /* this inode's #, not used for DOS */
    mode_t  st_mode;        /* file mode */
    short   st_nlink;       /* # of hard links */
    uid_t   st_uid;         /* user-id, always 'root' */
    gid_t   st_gid;         /* group-id, always 'root' */
    dev_t   st_rdev;        /* should be device type */
                            /* but same as st_dev for the time being */
    off_t   st_size;        /* total file size */
    time_t  st_atime;       /* should be file last access time */
    time_t  st_mtime;       /* file last modify time */
    time_t  st_ctime;       /* should be file last status change time */

    time_t          st_btime;       /* last archived date and time */
    unsigned long   st_attr;        /* file attributes */
                                    /* next 4 fields Netware only */
    unsigned long   st_archivedID;  /* user/object ID that last archived file */
    unsigned long   st_updatedID;   /* user/object ID that last updated file */
    unsigned short  st_inheritedRightsMask;
    unsigned char   st_originatingNameSpace;
};

:: ISO names (MS)
:include ext.sp

:include wchar_t.sp
struct _stat {
    dev_t   st_dev;         /* disk drive file resides on */
    ino_t   st_ino;         /* this inode's #, not used for DOS */
    mode_t  st_mode;        /* file mode */
    short   st_nlink;       /* # of hard links */
    uid_t   st_uid;         /* user-id, always 'root' */
    gid_t   st_gid;         /* group-id, always 'root' */
    dev_t   st_rdev;        /* should be device type */
                            /* but same as st_dev for the time being */
    off_t   st_size;        /* total file size */
    time_t  st_atime;       /* should be file last access time */
    time_t  st_mtime;       /* file last modify time */
    time_t  st_ctime;       /* should be file last status change time */

    time_t          st_btime;       /* last archived date and time */
    unsigned long   st_attr;        /* file attributes */
                                    /* next 4 fields Netware only */
    unsigned long   st_archivedID;  /* user/object ID that last archived file */
    unsigned long   st_updatedID;   /* user/object ID that last updated file */
    unsigned short  st_inheritedRightsMask;
    unsigned char   st_originatingNameSpace;
};

struct _stati64 {
    dev_t   st_dev;         /* disk drive file resides on */
    ino_t   st_ino;         /* this inode's #, not used for DOS */
    mode_t  st_mode;        /* file mode */
    short   st_nlink;       /* # of hard links */
    uid_t   st_uid;         /* user-id, always 'root' */
    gid_t   st_gid;         /* group-id, always 'root' */
    dev_t   st_rdev;        /* should be device type */
                            /* but same as st_dev for the time being */
    __int64 st_size;        /* total file size */
    time_t  st_atime;       /* should be file last access time */
    time_t  st_mtime;       /* file last modify time */
    time_t  st_ctime;       /* should be file last status change time */

    time_t          st_btime;       /* last archived date and time */
    unsigned long   st_attr;        /* file attributes */
                                    /* next 4 fields Netware only */
    unsigned long   st_archivedID;  /* user/object ID that last archived file */
    unsigned long   st_updatedID;   /* user/object ID that last updated file */
    unsigned short  st_inheritedRightsMask;
    unsigned char   st_originatingNameSpace;
};
:include extepi.sp

:endsegment
/*
 *  Encoding of the file mode
 */
#define S_IFMT      0xF000          /* Type of file mask               */
#define S_IFIFO     0x1000          /* FIFO (pipe)                     */
#define S_IFCHR     0x2000          /* Character special               */
#define S_IFDIR     0x4000          /* Directory                       */
#define S_IFNAM     0x5000          /* Special named file              */
:segment LINUX
#define S_IFBLK     0x6000          /* Block special                   */
:elsesegment DOS
#define S_IFBLK     0               /* Block special                   */
:endsegment
#define S_IFREG     0x8000          /* Regular                         */
:segment LINUX
#define S_IFLNK     0xA000          /* Symbolic link                   */
#define S_IFSOCK    0xC000          /* Socket                          */
:elsesegment DOS
#define S_IFLNK     0               /* Symbolic link                   */
#define S_IFSOCK    0               /* Socket                          */
:endsegment

:include ext.sp
#define _S_IFMT     S_IFMT
#define _S_IFIFO    S_IFIFO
#define _S_IFCHR    S_IFCHR
#define _S_IFDIR    S_IFDIR
#define _S_IFNAM    S_IFNAM
#define _S_IFBLK    S_IFBLK
#define _S_IFREG    S_IFREG
#define _S_IFLNK    S_IFLNK
#define _S_IFSOCK   S_IFSOCK
:include extepi.sp

#define S_ISFIFO(m) (((m)&_S_IFMT)==S_IFIFO)    /* Test for FIFO (pipe)        */
#define S_ISCHR(m)  (((m)&_S_IFMT)==S_IFCHR)    /* Test for char special file  */
#define S_ISDIR(m)  (((m)&_S_IFMT)==S_IFDIR)    /* Test for directory file     */
#define S_ISBLK(m)  (((m)&_S_IFMT)==S_IFBLK)    /* Test for block specl file   */
#define S_ISREG(m)  (((m)&_S_IFMT)==S_IFREG)    /* Test for regular file       */
#define S_ISLNK(m)  (((m)&_S_IFMT)==S_IFLNK)    /* Test for symbolic link      */
#define S_ISNAM(m)  (((m)&_S_IFMT)==S_IFNAM)    /* Test for special named file */
#define S_ISSOCK(m) (((m)&_S_IFMT)==S_IFSOCK)   /* Test for socket             */

/*
 *  Common filetype macros
 */
#define S_ISUID     004000      /* set user id on execution         */
#define S_ISGID     002000      /* set group id on execution        */
#define S_ISVTX     001000      /* sticky bit (does nothing yet)    */

#define S_ENFMT     S_ISGID     /* enforcement mode locking         */

/*
 *  Owner permissions
 */
#define S_IRWXU     000700      /* Read, write, execute/search     */
#define S_IRUSR     000400      /* Read permission                 */
#define S_IWUSR     000200      /* Write permission                */
#define S_IXUSR     000100      /* Execute/search permission       */

#define S_IREAD     S_IRUSR     /* Read permission                 */
#define S_IWRITE    S_IWUSR     /* Write permission                */
#define S_IEXEC     S_IXUSR     /* Execute/search permission       */

:include ext.sp
#define _S_IREAD    S_IREAD
#define _S_IWRITE   S_IWRITE
#define _S_IEXEC    S_IEXEC
:include extepi.sp

/*
 *  Group permissions
 */
#define S_IRWXG     000070      /* Read, write, execute/search     */
#define S_IRGRP     000040      /* Read permission                 */
#define S_IWGRP     000020      /* Write permission                */
#define S_IXGRP     000010      /* Execute/search permission       */

/*
 *  Other permissions
 */
#define S_IRWXO     000007      /*  Read, write, execute/search     */
#define S_IROTH     000004      /*  Read permission                 */
#define S_IWOTH     000002      /*  Write permission                */
#define S_IXOTH     000001      /*  Execute/search permission       */

/*
 *  POSIX 1003.1 Prototypes.
 */
_WCRTLINK extern int     chmod( const char *__path, mode_t __mode );
_WCRTLINK extern int     stat( const char *__path, struct stat *__buf );
_WCRTLINK extern int     lstat( const char *__path, struct stat *__buf );
_WCRTLINK extern int     fstat( int __fildes, struct stat *__buf );
_WCRTLINK extern mode_t  umask( mode_t __cmask );
:segment LINUX
_WCRTLINK extern int     fchmod( int __fildes, mode_t __mode );
_WCRTLINK extern int     mkdir( const char *__path, mode_t __mode );
_WCRTLINK extern int     mkfifo( const char *__path, mode_t __mode );
_WCRTLINK extern int     mknod( const char *__path, mode_t __mode, int __dev );
:segment LINUX
_WCRTLINK extern int     fstat64( int __fildes, struct stat64 *__buf );
_WCRTLINK extern int     lstat64( const char *__path, struct stat64 *__buf );
_WCRTLINK extern int     stat64( const char *__path, struct stat64 *__buf );
:endsegment
:: ISO names (MS)
:include ext.sp
::
:elsesegment DOS
::
:: ISO names (MS)
:include ext.sp
_WCRTLINK extern int     _wstat( const wchar_t *__path, struct stat *__buf );
_WCRTLINK extern int     _wfstat( int __fildes, struct stat *__buf );

_WCRTLINK extern int     _fstati64( int __fildes, struct _stati64 *__buf );
_WCRTLINK extern int     _wfstati64( int __fildes, struct _stati64 *__buf );
_WCRTLINK extern int     _stati64( const char *__path, struct _stati64 *__buf );
_WCRTLINK extern int     _wstati64( const wchar_t *__path, struct _stati64 *__buf );

:endsegment
_WCRTLINK extern int     _fstat( int, struct stat *__buf );
_WCRTLINK extern int     _stat( const char *__path, struct stat *__buf );
:include extepi.sp

:include poppack.sp

:include cplusepi.sp

:include extepi.sp

#endif
:endsegment
